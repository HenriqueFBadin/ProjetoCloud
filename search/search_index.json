{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto 1 de Cloud - Docker e API","text":""},{"location":"#nome-do-aluno","title":"Nome do Aluno","text":"<p>Henrique F. Badin</p>"},{"location":"#explicacao-do-projeto","title":"Explica\u00e7\u00e3o do Projeto","text":"<p>Este projeto \u00e9 uma API que permite o cadastro, login e consulta de imagens do espa\u00e7o, obtidas aleatoriamente a partir de uma API da NASA. Desenvolvido com Node.js, a aplica\u00e7\u00e3o gerencia usu\u00e1rios em um banco de dados PostgreSQL em um container Docker.</p>"},{"location":"#como-executar-a-aplicacao","title":"Como Executar a Aplica\u00e7\u00e3o","text":"<p>Para rodar a aplica\u00e7\u00e3o, siga estes passos:</p> <ol> <li>Baixe o arquivo compose.yml:     Baixar compose.yml     </li> </ol> <ol> <li>Execute o Docker Compose:    Certifique-se de ter o Docker e o Docker Compose instalados. Execute o docker. Ap\u00f3s isso, execute o comando abaixo no terminal CMD, no diret\u00f3rio onde o arquivo <code>compose.yaml</code> est\u00e1 localizado:    <code>docker compose up -d</code></li> <li>Acesse a aplica\u00e7\u00e3o:    A aplica\u00e7\u00e3o estar\u00e1 dispon\u00edvel em <code>http://localhost:8080</code>, conforme configurado no <code>compose.yaml</code>.</li> </ol>"},{"location":"#documentacao-dos-endpoints","title":"Documenta\u00e7\u00e3o dos Endpoints","text":""},{"location":"#post-registrar","title":"POST /registrar","text":"<p>Registra um novo usu\u00e1rio.</p> <p>Request</p> <pre><code>{\n  \"nome\": \"Disciplina Cloud\",\n  \"email\": \"cloud@insper.edu.br\",\n  \"senha\": \"cloud0\"\n}\n</code></pre> <p>Response</p> <ul> <li>resposta positiva (201)</li> </ul> <pre><code>{\n  \"message\": \"Usu\u00e1rio registrado com sucesso!\",\n  \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibm9tZSI6IkRpc2NpcGxpbmEgQ2xvdWQiLCJlbWFpbCI6ImNsb3VkQGluc3Blci5lZHUuYnIiLCJpYXQiOjE3MzA0MDg5MzgsImV4cCI6MTczMDQxMjUzOH0.fe5qVKSO5oaQY-U9iVfFR7oRteB2J_N51BAArC_PJRA\"\n}\n</code></pre> <ul> <li>resposta caso o nome esteja em branco (400)</li> </ul> <pre><code>{\n  \"error\": \"Nome n\u00e3o pode ser nulo.\"\n}\n</code></pre> <ul> <li>resposta caso um dos par\u00e2metros exceda o limite de caracteres (400)</li> </ul> <pre><code>{\n  \"error\": \"Nome/Email/Senha estourou o limite de caracteres.\"\n}\n</code></pre> <ul> <li>resposta caso o email j\u00e1 esteja cadastrado (409)</li> </ul> <pre><code>{\n  \"error\": \"Email j\u00e1 est\u00e1 em uso.\"\n}\n</code></pre> <ul> <li>resposta para erro no servidor (500)</li> </ul> <pre><code>{\n  \"error\": \"Erro no servidor.\"\n}\n</code></pre>"},{"location":"#post-login","title":"POST /login","text":"<p>Autentica o usu\u00e1rio registrado.</p> <p>Request</p> <pre><code>{\n  \"email\": \"cloud@insper.edu.br\",\n  \"senha\": \"cloud0\"\n}\n</code></pre> <p>Response</p> <ul> <li>resposta positiva (200)</li> </ul> <pre><code>{\n  \"message\": \"Login realizado com sucesso!\",\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTQsIm5vbWUiOiJDbG91ZCIsImVtYWlsIjoiY2xvdWQwQGdtYWlsLmNvbSIsImlhd(...)\"\n}\n</code></pre> <ul> <li>resposta caso o email n\u00e3o esteja registrado no sistema (401)</li> </ul> <pre><code>{\n  \"error\": \"Email n\u00e3o existe no sistema.\"\n}\n</code></pre> <ul> <li>resposta caso a senha esteja incorreta (401)</li> </ul> <pre><code>{\n  \"error\": \"Senha incorreta para esse endere\u00e7o de email.\"\n}\n</code></pre> <ul> <li>resposta para erro no servidor (500)</li> </ul> <pre><code>{\n  \"error\": \"Erro no servidor.\"\n}\n</code></pre>"},{"location":"#get-consultar","title":"GET /consultar","text":"<p>Esse endpoint consulta faz uma consulta na API da NASA e retorna a imagem do dia. Todo dia uma nova imagem \u00e9 retornada.</p> <p>Headers</p> <ul> <li><code>Authorization: Bearer &lt;JWT&gt;</code></li> </ul> <p>Response</p> <p>resposta positiva (200)</p> <pre><code>{\n  \"message\": \"Dados da NASA consultados com sucesso!\",\n  \"data\": \"2024-10-16\",\n  \"title\": \"Astronomy Picture of the Day\",\n  \"url\": \"https://apod.nasa.gov/apod/image/2410/picture.jpg\",\n  \"explanation\": \"Explica\u00e7\u00e3o detalhada sobre a imagem do dia...\",\n  \"copyright\": \"NASA\"\n}\n</code></pre> <p>resposta de erro na requisi\u00e7\u00e3o (500)</p> <pre><code>{\n  \"error\": \"Erro ao consultar dados Dados da NASA.\"\n}\n</code></pre>"},{"location":"#testando-a-api","title":"Testando a API","text":"<p>Para interagir com a API, voc\u00ea pode utilizar o Postman ou o terminal CMD do diret\u00f3rio com cURL. Al\u00e9m disso, \u00e9 poss\u00edvel utilizar o swagger da API no endpoint <code>/docs</code>. Recomendo o uso do Postman para uma melhor visualiza\u00e7\u00e3o das respostas.</p>"},{"location":"#usando-o-postman","title":"Usando o Postman","text":"<ol> <li>Instale o Postman: Se ainda n\u00e3o o possui, fa\u00e7a o download e instale o Postman aqui.</li> <li>Realize as requisi\u00e7\u00f5es: Use as informa\u00e7\u00f5es dos endpoints documentados para realizar suas requisi\u00e7\u00f5es. No Postman \u00e9 necess\u00e1rio passar um JSON no body da requisi\u00e7\u00e3o ou um Bearer Token no header, dependendo da requisi\u00e7\u00e3o.</li> </ol>"},{"location":"#usando-curl","title":"Usando cURL","text":"<p>Se preferir usar o terminal do windows, o CMD, voc\u00ea pode usar cURL para fazer as requisi\u00e7\u00f5es. Aqui est\u00e3o alguns exemplos de como voc\u00ea pode testar os endpoints:</p> <ul> <li>Registrar um novo usu\u00e1rio:</li> </ul> <p>Copiar c\u00f3digo e adapt\u00e1-lo</p> <p><code>curl -X POST http://localhost:8080/registrar -H \"Content-Type: application/json\" -d \"{\\\"nome\\\": \\\"&lt;Seu nome&gt;\\\",\\\"email\\\": \\\"&lt;Seu email&gt;\\\", \\\"senha\\\": \\\"&lt;Sua senha&gt;\\\"}\"</code></p> <ul> <li>Login do usu\u00e1rio:</li> </ul> <p>Copiar c\u00f3digo e adapt\u00e1-lo</p> <p><code>curl -X POST http://localhost:8080/login -H \"Content-Type: application/json\" -d \"{\\\"email\\\": \\\"&lt;Seu email&gt;\\\", \\\"senha\\\": \\\"&lt;Sua senha&gt;\\\"}\"</code></p> <ul> <li>Consultar uma imagem do espa\u00e7o:</li> </ul> <p>Copiar c\u00f3digo e adapt\u00e1-lo</p> <p><code>curl -X GET http://localhost:8080/consultar -H \"Authorization: Bearer &lt;Seu JWT&gt;\"</code></p> <p>Substitua os par\u00e2metros como <code>&lt;Seu nome&gt;</code> pelo seu pr\u00f3prio nome e <code>&lt;JWT&gt;</code> pelo token obtido ap\u00f3s o login.</p>"},{"location":"#video-de-execucao","title":"V\u00eddeo de Execu\u00e7\u00e3o","text":"<p>Veja um v\u00eddeo curto de execu\u00e7\u00e3o da aplica\u00e7\u00e3o aqui.</p>"},{"location":"#imagens-do-projeto","title":"Imagens do Projeto","text":"<p>Aqui est\u00e3o as screenshots da aplica\u00e7\u00e3o funcionando.</p>"},{"location":"#imagem-1","title":"Imagem 1","text":""},{"location":"#imagem-2","title":"Imagem 2","text":""},{"location":"#imagem-3","title":"Imagem 3","text":""},{"location":"#docker-hub","title":"Docker Hub","text":"<p>Imagem dispon\u00edvel no Docker Hub: Link para Docker Hub</p>"},{"location":"#arquivo-composeyaml-caso-a-instalacao-pelo-botao-nao-funcione","title":"Arquivo Compose.yaml caso a instala\u00e7\u00e3o pelo bot\u00e3o n\u00e3o funcione","text":"<p>O arquivo <code>compose.yaml</code> est\u00e1 localizado na raiz do projeto <code>https://github.com/HenriqueFBadin/ProjetoCloud</code>. Caso n\u00e3o consiga instal\u00e1-lo pelo bot\u00e3o, busque-o nesse reposit\u00f3rio. Ele utiliza imagens do Docker Hub e configura o PostgreSQL e a API para que n\u00e3o haja necessidade de builds adicionais.</p> <pre><code>\n</code></pre>"},{"location":"aws-deploy/","title":"Deploy da aplica\u00e7\u00e3o no AWS","text":"<p>Para acessar a API restful que foi implementada na AWS voc\u00ea pode acessar o seguinte link: aqui. Por aqui voc\u00ea pode acessar o swagger da API, que \u00e9 uma representa\u00e7\u00e3o visual dos endpoints, e ver exemplos de como devem ser os par\u00e2metros. Entretanto, o swagger est\u00e1 com algum problema de CORS que eu n\u00e3o consegui resolver, ent\u00e3o eu recomendaria a utiliza\u00e7\u00e3o do postman ou a utiliza\u00e7\u00e3o de chamadas CUrl para testar os endpoints da API. As instru\u00e7\u00f5es de como fazer isso est\u00e3o no final dessa documenta\u00e7\u00e3o, apenas garanta que est\u00e1 utilizando o seguinte link: aqui.</p> <p>A aplica\u00e7\u00e3o foi configurada para operar em um cluster do Elastic Kubernetes Service (EKS) na regi\u00e3o de Ohio da AWS, garantindo escalabilidade e gerenciamento eficiente de containers. Para acessar a aplica\u00e7\u00e3o, basta acessar o link acima. A aplica\u00e7\u00e3o foi dividida em dois deployments, um para a base de dados e outro para a aplica\u00e7\u00e3o. A base de dados \u00e9 um container com uma imagem do postgres e a aplica\u00e7\u00e3o \u00e9 um container com uma imagem de uma aplica\u00e7\u00e3o em NodeJS.</p>"},{"location":"aws-deploy/#como-foi-feito-o-deploy-do-projeto-na-aws","title":"Como foi feito o deploy do projeto na AWS?","text":"<p>A partir daqui, este documento descreve as etapas que foram necess\u00e1rias para criar e configurar um cluster EKS (Elastic Kubernetes Service) na AWS utilizando a AWS CLI. Cada etapa ser\u00e1 explicada em detalhes, incluindo o motivo de sua realiza\u00e7\u00e3o. O objetivo \u00e9 ajudar a configurar e gerenciar um cluster Kubernetes para hospedar aplica\u00e7\u00f5es modernas.</p> <ol> <li> <p>Instala\u00e7\u00e3o do CLI da AWS:</p> <p>O AWS CLI \u00e9 uma ferramenta de linha de comando que permite interagir com os servi\u00e7os da AWS.Para instalar o AWS CLI, as instru\u00e7\u00f5es presentes no site aqui foram usadas como refer\u00eancia.</p> </li> <li> <p>Configura\u00e7\u00e3o do AWS CLI:</p> <p>Ap\u00f3s a instala\u00e7\u00e3o do AWS CLI, foi necess\u00e1rio configurar o acesso \u00e0 sua conta da AWS. Para configurar o AWS CLI, foi utilizada como base a seguinte documenta\u00e7\u00e3o aqui.</p> <p>2.1. Criar uma chave de acesso: Para configurar o AWS CLI, \u00e9 necess\u00e1rio criar uma chave de acesso na AWS. Para isso os seguintes passos foram seguidos:</p> <ul> <li>Fa\u00e7a login no AWS Management Console</li> </ul> <p>Conta de usu\u00e1rio \u00fanico:</p> <ul> <li>no canto superior direito, escolha seu nome de usu\u00e1rio da AWS para abrir o menu de navega\u00e7\u00e3o. Para este exemplo, selecione webadmin.</li> </ul> <p>Conta de v\u00e1rios usu\u00e1rios:</p> <ul> <li>Escolha IAM na lista de servi\u00e7os. No painel do IAM, selecione Usu\u00e1rios e escolha o nome do usu\u00e1rio.</li> <li>Selecione Security credentials (Credenciais de seguran\u00e7a).</li> <li>Em Chaves de acesso, escolha Criar chave de acesso.</li> <li>Escolha Interface de linha de comandos (CLI) e, em seguida, escolha Pr\u00f3ximo.</li> <li>Selecione Create access key (Criar chave de acesso).</li> <li> <p>Selecione Download do arquivo .csv para salvar a chave de acesso CSV no seu computador. Armazene o arquivo em um local seguro. Voc\u00ea n\u00e3o pode compartilhar essas informa\u00e7\u00f5es na web.</p> <p>2.2. Para configurar a AWS CLI:</p> </li> </ul> <p>Para configurar a AWS CLI, os seguintes passos foram seguidos:</p> <ul> <li>Abra um terminal.</li> <li>Execute o comando <code>aws configure</code>.</li> <li>Forne\u00e7a as seguintes informa\u00e7\u00f5es:<ul> <li>AWS Access Key ID: Chave de acesso da AWS.</li> <li>AWS Secret Access Key: Chave secreta de acesso da AWS.</li> <li>Default region name: Regi\u00e3o padr\u00e3o para os servi\u00e7os da AWS.</li> <li>Default output format: Formato de sa\u00edda padr\u00e3o para os comandos da AWS.</li> </ul> </li> </ul> </li> <li> <p>Instala\u00e7\u00e3o do EKSCTL:</p> <p>O eksctl \u00e9 uma ferramenta de linha de comando que simplifica a cria\u00e7\u00e3o, a configura\u00e7\u00e3o e a gest\u00e3o de clusters do EKS. Para instalar o eksctl, as instru\u00e7\u00f5es presentes no site aqui foram usadas como refer\u00eancia. A ferramenta foi instalada no sistema operacional a partir de Third-Parties. Em resumo, os seguintes comandos foram executados no powershell:</p> <p>choco install eksctl</p> <p>\u26a0\ufe0f Observa\u00e7\u00e3o: Esse comando precisa que o powershell tenha permiss\u00e3o de administrador.</p> </li> <li> <p>Cria\u00e7\u00e3o da Role a ser utilizada:</p> <p>Uma role atribui permiss\u00f5es a uma entidade, permitindo-a acessar recursos e controlar a\u00e7\u00f5es na AWS. Para criar uma role, foi necess\u00e1rio entrar na aba de fun\u00e7\u00f5es do IAM da AWS:</p> <p></p> <ul> <li> <p>A primeira role criada foi para o cluster, e possuia apenas a permiss\u00e3o AmazonEKSClusterPolicy. Como \u00e9 poss\u00edvel ver na descri\u00e7\u00e3o desta pol\u00edtica concede ao Kubernetes as permiss\u00f5es necess\u00e1rias para gerenciar recursos em seu nome, incluindo a permiss\u00e3o Ec2:CreateTags para adicionar informa\u00e7\u00f5es de identifica\u00e7\u00e3o a recursos da EC2, como inst\u00e2ncias, grupos de seguran\u00e7a e interfaces de rede el\u00e1stica.</p> </li> <li> <p>A segunda role criada foi destinada ao Node Group. Essa role permite ao Amazon EKS gerenciar os servi\u00e7os relacionados ao cluster. Contudo, para intera\u00e7\u00f5es com outros servi\u00e7os da AWS, podem ser necess\u00e1rios novos profiles com roles espec\u00edficas, que devem ser criadas conforme as fun\u00e7\u00f5es do Node Group.</p> </li> </ul> <p>Nesta role, foram adicionadas duas pol\u00edticas principais: AmazonEKSWorkerNodePolicy e AmazonEKS_CNI_Policy.</p> <pre><code>- AmazonEKSWorkerNodePolicy: Concede aos n\u00f3s de trabalho do EKS as permiss\u00f5es necess\u00e1rias para operar e interagir com o cluster.\n- AmazonEKS_CNI_Policy: Permite ao Amazon VPC CNI Plugin gerenciar a configura\u00e7\u00e3o de endere\u00e7os IP, incluindo listar, descrever e modificar Elastic Network Interfaces (ENIs).\n</code></pre> <p>Essas permiss\u00f5es garantem uma comunica\u00e7\u00e3o eficiente e uma integra\u00e7\u00e3o adequada entre os n\u00f3s de trabalho e o cluster EKS.</p> </li> <li> <p>Cria\u00e7\u00e3o da VPC e subnets:</p> <p>Para a cria\u00e7\u00e3o da VPC utilizou-se um modelo pronto da AWS para criar subnets p\u00fablicas e privadas de forma organizada, usando o CloudFormation (no caso, no formato Terraform para a AWS). A ideia \u00e9 separar os recursos que precisam de acesso p\u00fablico daqueles que devem ficar em uma \u00e1rea mais protegida, sem acesso direto \u00e0 internet.</p> <p>Com as subnets configuradas, tamb\u00e9m defini como as m\u00e1quinas EC2 v\u00e3o ser criadas. A diferen\u00e7a entre as subnets p\u00fablicas e privadas \u00e9 bem importante:</p> <p>Subnets P\u00fablicas: S\u00e3o para coisas que precisam acessar ou ser acessadas pela internet, tipo servidores web ou balanceadores de carga. Subnets Privadas: Ficam para os recursos mais internos, como bancos de dados ou sistemas de backend, que n\u00e3o podem ficar expostos diretamente. Essa configura\u00e7\u00e3o ajuda a deixar o ambiente mais seguro e tamb\u00e9m facilita a organiza\u00e7\u00e3o e o crescimento da infraestrutura, mesmo que seja algo simples agora.</p> <p>Foto da estrutura de rede gerada pela AWS:</p> <p></p> <p>  Baixar o modelo de cria\u00e7\u00e3o da VPC  </p> </li> <li> <p>Cria\u00e7\u00e3o do cluster:</p> <p>Criou-se o cluster passando para ele qual a role que usaria e qual a especifica\u00e7\u00e3o de vpc usada. Ambas, a role e as especifica\u00e7\u00f5es da vpc, s\u00e3o as criadas nos passos anteriores.</p> <p> </p> </li> <li> <p>Configurar o Contexto do Kubectl:</p> <p>Ap\u00f3s criar o cluster, foi configrado o contexto do <code>kubectl</code> para se conectar ao cluster EKS:</p> <p>aws eks --region us-east-2 update-kubeconfig --name eks-app-NASA</p> <p>Este comando atualiza o arquivo de configura\u00e7\u00e3o <code>kubeconfig</code> para permitir que o <code>kubectl</code> se comunique com o cluster rec\u00e9m-criado. \u00c9 uma etapa essencial para gerenciar os recursos do Kubernetes no cluster.</p> </li> <li> <p>Cria\u00e7\u00e3o do Node Group:</p> <p>Criou-se um node group dentro do cluster para gerenciar os n\u00f3s de trabalho. O node group \u00e9 um conjunto de 2 inst\u00e2ncias EC2 que s\u00e3o usadas para executar os pods da aplica\u00e7\u00e3o, 1 para o db e outra para a API. Utilizou-se a role criado anteriormente para o node group.</p> </li> <li> <p>Cria\u00e7\u00e3o do Arquivo db-deployment.yaml:</p> <p>Criou-se um arquivo <code>db-deployment.yaml</code> com as configura\u00e7\u00f5es do deployment para a base de dados.</p> <p>Ele pode ser baixado aqui caso queira us\u00e1-lo como exemplo:</p> <p>  Baixar db-deployment.yml  </p> </li> <li> <p>Cria\u00e7\u00e3o do Arquivo web-deployment.yaml:</p> <p>Criou-se um arquivo <code>web-deployment.yaml</code> com as configura\u00e7\u00f5es do deployment para a base de dados.</p> <p>Ele pode ser baixado aqui caso queira us\u00e1-lo como exemplo:</p> <p>  Baixar web-deployment.yml  </p> </li> <li> <p>Deployment dos clusters:</p> <p>Execute os comandos abaixo para realizar o deployment do banco de dados e da aplica\u00e7\u00e3o web:</p> <p>kubectl apply -f db-deployment.yaml kubectl apply -f web-deployment.yaml </p> </li> <li> <p>Verificando status dos deployments:</p> <p>Para encontrar poss\u00edveis erros, \u00e9 importante verificar o status dos deployments. Alguns comandos \u00fateis s\u00e3o:</p> <ul> <li><code>kubectl describe deployment &lt;deployment-name&gt;</code>: Mostra informa\u00e7\u00f5es detalhadas sobre um deployment.</li> </ul> <p>kubectl describe deployment nodejs</p> <ul> <li><code>kubectl get all</code>: Mostra todos os recursos do cluster.</li> </ul> <p>kubectl get all</p> <ul> <li><code>kubectl get pods</code>: Mostra todos os pods do cluster.</li> </ul> <p>kubectl get pods</p> <ul> <li><code>kubectl logs &lt;pod-name&gt;</code>: Mostra os logs de um pod espec\u00edfico.</li> </ul> <p>kubectl logs nodejs-app-5d5d55f889-p86q8</p> </li> <li> <p>Obtendo o link da aplica\u00e7\u00e3o:</p> <p>Para obter o link da aplica\u00e7\u00e3o, foi utilizado o comando abaixo:</p> <p>kubectl get svc nodejs-app</p> <p>Este comando exibe informa\u00e7\u00f5es sobre o servi\u00e7o, incluindo o endere\u00e7o IP ou URL que pode ser usado para acessar a aplica\u00e7\u00e3o.</p> </li> </ol>"},{"location":"aws-deploy/#como-testar-a-aplicacao","title":"Como testar a aplica\u00e7\u00e3o?","text":"<p>Para testar a aplica\u00e7\u00e3o, voc\u00ea pode acessar o link da aplica\u00e7\u00e3o que foi obtido no passo anterior.</p> <p>Com esse link, podemos utilizar o postman ou realizarmos chamadas CUrl para testar os endpoints da API. A seguir, temos um exemplo de como realizar uma chamada CUrl para os endpoints da API usando o powershell, mude os valores para testar os endpoints da API:</p> <ul> <li>Registro:</li> </ul> <pre><code>curl -X POST \"http://ac815a5754c5f4c00a2d160a0dacc9bc-392542149.us-east-2.elb.amazonaws.com/registrar\" -H \"Content-Type: application/json\" -d '{\"nome\": \"testando\", \"email\": \"testePadrao@gmail.com\", \"senha\": \"teste\"}'\n</code></pre> <ul> <li>Login:</li> </ul> <pre><code>curl -X POST \"http://ac815a5754c5f4c00a2d160a0dacc9bc-392542149.us-east-2.elb.amazonaws.com/login\" -H \"Content-Type: application/json\" -d '{\"email\": \"testePadrao@gmail.com\", \"senha\": \"teste\"}'\n</code></pre> <ul> <li>Consultar imagem:</li> </ul> <pre><code>Invoke-RestMethod -Uri 'http://ac815a5754c5f4c00a2d160a0dacc9bc-392542149.us-east-2.elb.amazonaws.com/consultar' -Method GET -Headers @{ \"Content-Type\" = \"application/json\"; \"Authorization\" = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Mywibm9tZSI6InRlc3RlMTgxMSIsImVtYWlsIjoidGVzdGUxODExQGdtYWlsLmNvbSIsImlhdCI6MTczMjE2NzMyNSwiZXhwIjoxNzMyMTcwOTI1fQ.xRChB16g7PrmogMNRTvcN3cZ6PV85rtO6GOveCZ6rIE\" } -Body '{\"email\": \"testePadrao@gmail.com\", \"senha\": \"teste\"}'\n</code></pre>"},{"location":"aws-deploy/#video-de-execucao","title":"V\u00eddeo de Execu\u00e7\u00e3o","text":"<p>Veja um v\u00eddeo curto de execu\u00e7\u00e3o da aplica\u00e7\u00e3o: https://youtu.be/oUwb5SjlRE0.</p>"},{"location":"aws-deploy/#video-de-referencia","title":"V\u00eddeo de Refer\u00eancia","text":"<p>https://www.youtube.com/live/JrT5YV1KMeY?si=n2kRSCtEjWjYtay5</p>"}]}